{"version":3,"sources":["../../src/controllers/registered_rides.js"],"names":["db","require","module","exports","registered_rides","req","res","body","id","name","middle_name","surname","gender","status","nationality","state_of_origin","lg","date_of_birth","place_of_birth","phone_no","blood_group","genotype","address","NIN_number","next_of_king","next_of_king_address","phone_no2","plate_number","classes_number","side_number","phone_no3","name_of_company","query","query_type","sequelize","replacements","then","results","json","success","catch","err","console","log","getregistered_rides"],"mappings":"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","file":"registered_rides.js","sourcesContent":["const db = require(\"../models\");\n\nmodule.exports.registered_rides = (req, res) => {\n  // const {  } = req.body;\n  const {\n    id = null,\n    name = null,\n    middle_name = null,\n    surname = null,\n    gender = null,\n    status = null,\n    nationality = null,\n    state_of_origin = null,\n    lg = null,\n    date_of_birth = null,\n    place_of_birth = null,\n    phone_no = null,\n    blood_group = null,\n    genotype = null,\n    address = null,\n    NIN_number = null,\n    next_of_king = null,\n    next_of_king_address = null,\n    phone_no2 = null,\n    plate_number = null,\n    classes_number = null,\n    side_number = null,\n    phone_no3 = null,\n    name_of_company = null,\n  } = req.body;\n  const { query_type = \"create\" } = req.query;\n  db.sequelize\n    .query(\n      `call registered_rides(:id,:query_type,:name,:middle_name,:surname,:gender,:status,:nationality,:state_of_origin,:lg,:date_of_birth,:place_of_birth,:phone_no,:blood_group,:genotype,:address,:NIN_number,:next_of_king,:next_of_king_address,:phone_no2,:plate_number,:classes_number,:side_number,:phone_no3,:name_of_company,:qrcode)`,\n      {\n        replacements: {\n          name,\n          middle_name,\n          surname,\n          gender,\n          status,\n          nationality,\n          state_of_origin,\n          lg,\n          date_of_birth,\n          place_of_birth,\n          phone_no,\n          blood_group,\n          genotype,\n          address,\n          NIN_number,\n          next_of_king,\n          next_of_king_address,\n          phone_no2,\n          plate_number,\n          classes_number,\n          side_number,\n          phone_no3,\n          name_of_company,\n          query_type,\n        },\n      }\n    )\n    .then((results) => res.json({ success: true, results }))\n    .catch((err) => {\n      console.log(err);\n      res.status(500).json({ success: false });\n    });\n};\n\n\nmodule.exports.getregistered_rides = (req, res) => {\n  // const {  } = req.body;\n  const {\n    id = null,\n    name = null,\n    middle_name = null,\n    surname = null,\n    gender = null,\n    status = null,\n    nationality = null,\n    state_of_origin = null,\n    lg = null,\n    date_of_birth = null,\n    place_of_birth = null,\n    phone_no = null,\n    blood_group = null,\n    genotype = null,\n    address = null,\n    NIN_number = null,\n    next_of_king = null,\n    next_of_king_address = null,\n    phone_no2 = null,\n    plate_number = null,\n    classes_number = null,\n    side_number = null,\n    phone_no3 = null,\n    name_of_company = null,\n  } = req.body;\n  const { query_type = \"create\" } = req.query;\n  db.sequelize\n    .query(\n      `call registered_rides(:id,:query_type,:name,:middle_name,:surname,:gender,:status,:nationality,:state_of_origin,:lg,:date_of_birth,:place_of_birth,:phone_no,:blood_group,:genotype,:address,:NIN_number,:next_of_king,:next_of_king_address,:phone_no2,:plate_number,:classes_number,:side_number,:phone_no3,:name_of_company,:qrcode)`,\n      {\n        replacements: {\n          id,\n          name,\n          middle_name,\n          surname,\n          gender,\n          status,\n          nationality,\n          state_of_origin,\n          lg,\n          date_of_birth,\n          place_of_birth,\n          phone_no,\n          blood_group,\n          genotype,\n          address,\n          NIN_number,\n          next_of_king,\n          next_of_king_address,\n          phone_no2,\n          plate_number,\n          classes_number,\n          side_number,\n          phone_no3,\n          name_of_company,\n          query_type,\n        },\n      }\n    )\n    .then((results) => res.json({ success: true, results }))\n    .catch((err) => {\n      console.log(err);\n      res.status(500).json({ success: false });\n    });\n};\n\n\n\n"]}