{"version":3,"sources":["../../src/controllers/drivers.js"],"names":["db","require","module","exports","registerDriver","req","res","body","query_type","driver_id","name","nin","phone","email","address","dob","state","lga","next_of_kin","vehicle_id","sequelize","query","replacements","resp","status","json","success","results","console","error","getAllDriver"],"mappings":"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","file":"drivers.js","sourcesContent":["// const bcrypt = require ('bcryptjs';)\nconst db = require('../models');\n\nmodule.exports.registerDriver = async (req, res) => {\n  const {\n    query_type = 'insert',\n    driver_id =null,\n    name=null,\n    nin=null,\n    phone=null,\n    email=null,\n    address=null,\n    dob=null,\n    state=null,\n    lga=null,\n    next_of_kin=null,\n    vehicle_id=null,\n  } = req.body;\n\n  try {\n    const resp = await db.sequelize.query(\n      `CALL drivers(:query_type, \n        :driver_id, \n        :name,\n            :nin,\n            :phone,\n            :email,\n            :address,\n            :dob,\n            :state,\n            :lga,\n           \t:next_of_kin,\n            :vehicle_id)`,\n      {\n        replacements: {\n          query_type,\n          driver_id,\n          name,\n          nin,\n          phone,\n          email,\n          address,\n          dob,\n          state,\n          lga,\n          next_of_kin,\n          vehicle_id\n        }\n      }\n    );\n\n    res.status(200).json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to register vehicle' });\n  }\n};\n\n//  @ Get all vendors\n//  @route GET /vendors \nmodule.exports.getAllDriver = async (req, res) => {\n  const {\n    query_type = 'select',\n    driver_id =null,\n    name=null,\n    nin=null,\n    phone=null,\n    email=null,\n    address=null,\n    dob=null,\n    state=null,\n    lga=null,\n    next_of_kin=null,\n    vehicle_id=null,\n  } = req.query;\n\n  try {\n    const resp = await db.sequelize.query(\n      `CALL drivers(:query_type, \n        :driver_id, \n        :name,\n            :nin,\n            :phone,\n            :email,\n            :address,\n            :dob,\n            :state,\n            :lga,\n           \t:next_of_kin,\n            :vehicle_id)`,\n      {\n        replacements: {\n          query_type,\n          driver_id,\n          name,\n          nin,\n          phone,\n          email,\n          address,\n          dob,\n          state,\n          lga,\n          next_of_kin,\n          vehicle_id\n        }\n      }\n    );\n\n    res.status(200).json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to fetch vehicle' });\n  }\n};\n\n\n// };\n\n\n"]}