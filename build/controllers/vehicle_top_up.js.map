{"version":3,"sources":["../../src/controllers/vehicle_top_up.js"],"names":["db","require","moment","module","exports","createTopUp","req","res","body","agent_id","vehicle_id","amount","t_date","created_at","updated_at","console","log","sequelize","query","replacements","format","resp","status","json","success","results","error","fetchTopUp","id","name","super_agent","query_type"],"mappings":";;;;AAAA;AACA,IAAMA,KAAKC,QAAQ,WAAR,CAAX;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;;AAEAE,OAAOC,OAAP,CAAeC,WAAf;AAAA,qEAA6B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBAQrBD,IAAIE,IARiB,iCAExBC,QAFwB,EAExBA,QAFwB,sCAEb,IAFa,wDAGxBC,UAHwB,EAGxBA,UAHwB,wCAGX,IAHW,sDAIxBC,MAJwB,EAIxBA,MAJwB,oCAIhB,IAJgB,kDAKxBC,MALwB,EAKxBA,MALwB,oCAKf,IALe,sDAMxBC,UANwB,EAMxBA,UANwB,wCAMb,IANa,0DAOxBC,UAPwB,EAOxBA,UAPwB,wCAOb,IAPa;;AAS5BC,oBAAQC,GAAR,CAAYV,IAAIE,IAAhB;AAT4B;AAAA;AAAA,mBAWNR,GAAGiB,SAAH,CAAaC,KAAb,8IASjB;AACEC,4BAAc;AACZV,kCADY;AAEZE,8BAFY;AAGZC,wBAAOV,SAASkB,MAAT,CAAgB,YAAhB,CAHK;AAIZP,sCAJY;AAKZC,sCALY;AAMZJ;AANY;AADhB,aATiB,CAXM;;AAAA;AAWnBW,gBAXmB;;;AAgCzBd,gBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,IAAX,EAAiBC,SAASJ,IAA1B,EAArB;AAhCyB;AAAA;;AAAA;AAAA;AAAA;;AAkCzBN,oBAAQW,KAAR;AACAnB,gBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBE,OAAO,uBAAzB,EAArB;;AAnCyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;;AAuCA;AACA;AACAvB,OAAOC,OAAP,CAAeuB,UAAf;AAAA,sEAA4B,kBAAOrB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBAOtBD,IAAIY,KAPkB,6BAExBU,EAFwB,EAExBA,EAFwB,iCAEnB,IAFmB,+CAGxBC,IAHwB,EAGxBA,IAHwB,mCAGjB,IAHiB,uDAKxBC,WALwB,EAKxBA,WALwB,yCAKV,IALU;AAAA;AAAA;AAAA,mBAUL9B,GAAGiB,SAAH,CAAaC,KAAb,yEAMjB;AACEC,4BAAc;AACZY,sCADY;AAEZH,sBAFY;AAGZC,0BAHY;;AAKZC;;AALY;AADhB,aANiB,CAVK;;AAAA;AAUlBT,gBAVkB;;;AA4BxBd,gBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,IAAX,EAAiBC,SAASJ,IAA1B,EAArB;AA5BwB;AAAA;;AAAA;AAAA;AAAA;;AA8BxBN,oBAAQW,KAAR;AACAnB,gBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBE,OAAO,uBAAzB,EAArB;;AA/BwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA","file":"vehicle_top_up.js","sourcesContent":["// const bcrypt = require ('bcryptjs';)\nconst db = require('../models');\nconst moment = require('moment')\n\nmodule.exports.createTopUp = async (req, res) => {\n   const {\n     agent_id = null,\n     vehicle_id = null,\n     amount =null,\n     t_date = null,\n     created_at=null,\n     updated_at=null\n    } = req.body;\n console.log(req.body)\n  try {\n    const resp = await db.sequelize.query(\n      `CALL vehicle_top_up(\n      :agent_id,\n      :amount,\n      :t_date,\n      :created_at,\n      :updated_at,\n      :vehicle_id\n     )`,\n      {\n        replacements: {\n          agent_id,\n          amount,\n          t_date:moment().format('YYYY-MM-DD'),\n          created_at,\n          updated_at,\n          vehicle_id\n        }\n      }\n    );\n\n    res.status(200).json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to fetch agent' });\n  }\n};\n\n//  @ Get all superagent\n//  @route GET /superagent \nmodule.exports.fetchTopUp = async (req, res) => {\n  const {\n    id = null,\n    name = null,\n\n    super_agent = null,\n\n  } = req.query;\n\n  try {\n    const resp = await db.sequelize.query(\n      `CALL agents(\n      :id,\n      :name,\n      :super_agent,\n      )`,\n      {\n        replacements: {\n          query_type,\n          id,\n          name,\n       \n          super_agent,\n         \n        }\n      }\n    );\n\n    res.status(200).json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to fetch agent' });\n  }\n};\n"]}