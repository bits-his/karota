{"version":3,"sources":["../../src/controllers/vendors.js"],"names":["bcrypt","require","db","module","exports","createVendor","req","res","body","query_type","id","vendor_name","vendor_ofiice_address","vendor_state","vendor_lga","vendor_phone","vendor_email","vendor_tin","vendor_profile","vendor_bn_rc","contact_name","contact_address","contact_state","contact_password","contact_phone","contact_email","contact_lga","vendor_id","status","json","success","error","hash","hashedContactPassword","sequelize","query","replacements","resp","results","console","getVendors"],"mappings":"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","file":"vendors.js","sourcesContent":["const bcrypt = require('bcryptjs');\nconst db = require('../models');\n\nmodule.exports.createVendor = async (req, res) => {\n  const {\n    query_type = 'insert',\n    id = null,\n    vendor_name = null,\n    vendor_ofiice_address = null,\n    vendor_state = null,\n    vendor_lga = null,\n    vendor_phone = null,\n    vendor_email = null,\n    vendor_tin = null,\n    vendor_profile = null,\n    vendor_bn_rc = null,\n    contact_name = null,\n    contact_address = null,\n    contact_state = null,\n    contact_password = null,\n    contact_phone = null,\n    contact_email = null,\n    contact_lga = null,\n    vendor_id = null,\n  } = req.body;\n\n  if (!contact_password) {\n    return res.status(400).json({ success: false, error: 'Contact password is required' });\n  }\n\n  try {\n    const hashedContactPassword = await bcrypt.hash(contact_password, 10);\n\n    const resp = await db.sequelize.query(\n      `CALL vendors(\n        :query_type, \n        :id, \n        :vendor_name, \n        :vendor_ofiice_address, \n        :vendor_state, \n        :vendor_lga, \n        :vendor_phone, \n        :vendor_email, \n        :vendor_tin, \n        :vendor_profile, \n        :vendor_bn_rc, \n        :contact_name, \n        :contact_address, \n        :contact_state, \n        :contact_password, \n        :contact_phone, \n        :contact_email, \n        :contact_lga, \n        :vendor_id)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          vendor_name,\n          vendor_ofiice_address,\n          vendor_state,\n          vendor_lga,\n          vendor_phone,\n          vendor_email,\n          vendor_tin,\n          vendor_profile,\n          vendor_bn_rc,\n          contact_name,\n          contact_address,\n          contact_state,\n          contact_password: hashedContactPassword,\n          contact_phone,\n          contact_email,\n          contact_lga,\n          vendor_id\n        }\n      }\n    );\n\n    res.status(200).json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to create vendor' });\n  }\n};\n\nmodule.exports.getVendors = async (req, res) => {\n  const {\n    query_type = 'select',\n    id = null,\n    vendor_name = null,\n    vendor_ofiice_address = null,\n    vendor_state = null,\n    vendor_lga = null,\n    vendor_phone = null,\n    vendor_email = null,\n    vendor_tin = null,\n    vendor_profile = null,\n    vendor_bn_rc = null,\n    contact_name = null,\n    contact_address = null,\n    contact_state = null,\n    contact_password = null,\n    contact_phone = null,\n    contact_email = null,\n    contact_lga = null,\n    vendor_id = null,\n  } = req.query;\n  try {\n    const resp = await db.sequelize.query(\n      `CALL vendors(\n        :query_type, \n        :id, \n        :vendor_name, \n        :vendor_ofiice_address, \n        :vendor_state, \n        :vendor_lga, \n        :vendor_phone, \n        :vendor_email, \n        :vendor_tin, \n        :vendor_profile, \n        :vendor_bn_rc, \n        :contact_name, \n        :contact_address, \n        :contact_state, \n        :contact_password, \n        :contact_phone, \n        :contact_email, \n        :contact_lga, \n        :vendor_id)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          vendor_name,\n          vendor_ofiice_address,\n          vendor_state,\n          vendor_lga,\n          vendor_phone,\n          vendor_email,\n          vendor_tin,\n          vendor_profile,\n          vendor_bn_rc,\n          contact_name,\n          contact_address,\n          contact_state,\n          contact_password,\n          contact_phone,\n          contact_email,\n          contact_lga,\n          vendor_id,\n        }\n      }\n    );\n\n    res.status(200).json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to get vendors' });\n  }\n};\n"]}