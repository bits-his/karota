{"version":3,"file":"super_agents.js","names":["bcrypt","require","db","User","module","exports","superAgent","_ref","_asyncToGenerator2","_regenerator","mark","_callee","req","res","_req$body","_req$body$query_type","query_type","_req$body$id","id","_req$body$name","name","_req$body$phone","phone","_req$body$email","email","_req$body$address","address","_req$body$vendor","vendor","_req$body$state","state","_req$body$lga","lga","_req$body$nin","nin","resp","wrap","_callee$","_context","prev","next","body","console","log","sequelize","query","replacements","sent","status","json","success","results","t0","error","stop","_x","_x2","apply","arguments","fetchSuperAgent","_ref2","_callee2","_req$query","_req$query$query_type","_req$query$id","_req$query$name","_req$query$phone","_req$query$email","_req$query$address","_req$query$vendor","_req$query$state","_req$query$lga","_req$query$nin","_callee2$","_context2","_x3","_x4"],"sources":["../../src/controllers/super_agents.js"],"sourcesContent":["const bcrypt = require('bcryptjs')\nconst db = require('../models');\nconst User = db.User;\n\n\nmodule.exports.superAgent = async (req, res) => {\n  const {\n    query_type = \"insert\",\n    id = null,\n    name = null,\n    phone = null,\n    email = null,\n    address = null,\n    vendor = null,\n    state = null,\n    lga = null,\n    nin = null\n  } = req.body;\n  console.log(req.body)\n\n\n  try {\n    const resp = await db.sequelize.query(\n      `CALL super_agents(:query_type, \n        :id, \n        :name,\n            :phone,\n            :email,\n            :address,\n            :vendor,\n            :state,\n            :lga,\n            :nin)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          name,\n          phone,\n          email,\n          address,\n          vendor,\n          state,\n          lga,\n          nin\n        },\n      }\n    );\n\n    res.status(200).json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res\n      .status(500)\n      .json({ success: false, error: \"Failed to register super agent\" });\n  }\n  // } catch (err) {\n  //   res.status(500).json({ success: false, error: \"Internal error occured.\" });\n  // }\n}\n\n//   @ Fetch a single super agent by ID\n//   @route GET /api/superagent/:id\nmodule.exports.fetchSuperAgent = async (req, res) => {\n  const {\n    query_type = \"select_all\",\n    id = null,\n    name = null,\n    phone = null,\n    email = null,\n    address = null,\n    vendor = null,\n    state = null,\n    lga = null,\n    nin = null\n  } = req.query;\n\n  try {\n    const resp = await db.sequelize.query(\n      `CALL super_agents(:query_type, \n        :id, \n        :name,\n            :phone,\n            :email,\n            :address,\n            :vendor,\n            :state,\n            :lga,\n            :nin)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          name,\n          phone,\n          email,\n          address,\n          vendor,\n          state,\n          lga,\n          nin\n        },\n      }\n    );\n\n\n    res.json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res\n      .status(500)\n      .json({ success: false, error: \"Failed to register super agent\" });\n  }\n}"],"mappings":"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","ignoreList":[]}