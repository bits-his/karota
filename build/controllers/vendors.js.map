{"version":3,"file":"vendors.js","names":["bcrypt","require","db","module","exports","createVendor","_ref","_asyncToGenerator2","_regenerator","mark","_callee","req","res","_req$body","_req$body$query_type","query_type","_req$body$id","id","_req$body$vendor_name","vendor_name","_req$body$vendor_ofii","vendor_ofiice_address","_req$body$vendor_stat","vendor_state","_req$body$vendor_lga","vendor_lga","_req$body$vendor_phon","vendor_phone","_req$body$vendor_emai","vendor_email","_req$body$vendor_tin","vendor_tin","_req$body$vendor_prof","vendor_profile","_req$body$vendor_bn_r","vendor_bn_rc","_req$body$contact_nam","contact_name","_req$body$contact_add","contact_address","_req$body$contact_sta","contact_state","_req$body$contact_pas","contact_password","_req$body$contact_pho","contact_phone","_req$body$contact_ema","contact_email","_req$body$contact_lga","contact_lga","_req$body$vendor_id","vendor_id","hashedContactPassword","resp","wrap","_callee$","_context","prev","next","body","abrupt","status","json","success","error","hash","sent","sequelize","query","replacements","results","t0","console","stop","_x","_x2","apply","arguments","getVendors","_ref2","_callee2","_req$query","_req$query$query_type","_req$query$id","_req$query$vendor_nam","_req$query$vendor_ofi","_req$query$vendor_sta","_req$query$vendor_lga","_req$query$vendor_pho","_req$query$vendor_ema","_req$query$vendor_tin","_req$query$vendor_pro","_req$query$vendor_bn_","_req$query$contact_na","_req$query$contact_ad","_req$query$contact_st","_req$query$contact_pa","_req$query$contact_ph","_req$query$contact_em","_req$query$contact_lg","_req$query$vendor_id","_callee2$","_context2","_x3","_x4"],"sources":["../../src/controllers/vendors.js"],"sourcesContent":["const bcrypt = require('bcryptjs');\nconst db = require('../models');\n\nmodule.exports.createVendor = async (req, res) => {\n  const {\n    query_type = 'insert',\n    id = null,\n    vendor_name = null,\n    vendor_ofiice_address = null,\n    vendor_state = null,\n    vendor_lga = null,\n    vendor_phone = null,\n    vendor_email = null,\n    vendor_tin = null,\n    vendor_profile = null,\n    vendor_bn_rc = null,\n    contact_name = null,\n    contact_address = null,\n    contact_state = null,\n    contact_password = null,\n    contact_phone = null,\n    contact_email = null,\n    contact_lga = null,\n    vendor_id = null,\n  } = req.body;\n\n  if (!contact_password) {\n    return res.status(400).json({ success: false, error: 'Contact password is required' });\n  }\n\n  try {\n    const hashedContactPassword = await bcrypt.hash(contact_password, 10);\n\n    const resp = await db.sequelize.query(\n      `CALL vendors(\n        :query_type, \n        :id, \n        :vendor_name, \n        :vendor_ofiice_address, \n        :vendor_state, \n        :vendor_lga, \n        :vendor_phone, \n        :vendor_email, \n        :vendor_tin, \n        :vendor_profile, \n        :vendor_bn_rc, \n        :contact_name, \n        :contact_address, \n        :contact_state, \n        :contact_password, \n        :contact_phone, \n        :contact_email, \n        :contact_lga, \n        :vendor_id)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          vendor_name,\n          vendor_ofiice_address,\n          vendor_state,\n          vendor_lga,\n          vendor_phone,\n          vendor_email,\n          vendor_tin,\n          vendor_profile,\n          vendor_bn_rc,\n          contact_name,\n          contact_address,\n          contact_state,\n          contact_password: hashedContactPassword,\n          contact_phone,\n          contact_email,\n          contact_lga,\n          vendor_id\n        }\n      }\n    );\n\n    res.status(200).json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to create vendor' });\n  }\n};\n\nmodule.exports.getVendors = async (req, res) => {\n  const {\n    query_type = 'select',\n    id = null,\n    vendor_name = null,\n    vendor_ofiice_address = null,\n    vendor_state = null,\n    vendor_lga = null,\n    vendor_phone = null,\n    vendor_email = null,\n    vendor_tin = null,\n    vendor_profile = null,\n    vendor_bn_rc = null,\n    contact_name = null,\n    contact_address = null,\n    contact_state = null,\n    contact_password = null,\n    contact_phone = null,\n    contact_email = null,\n    contact_lga = null,\n    vendor_id = null,\n  } = req.query;\n  try {\n    const resp = await db.sequelize.query(\n      `CALL vendors(\n        :query_type, \n        :id, \n        :vendor_name, \n        :vendor_ofiice_address, \n        :vendor_state, \n        :vendor_lga, \n        :vendor_phone, \n        :vendor_email, \n        :vendor_tin, \n        :vendor_profile, \n        :vendor_bn_rc, \n        :contact_name, \n        :contact_address, \n        :contact_state, \n        :contact_password, \n        :contact_phone, \n        :contact_email, \n        :contact_lga, \n        :vendor_id)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          vendor_name,\n          vendor_ofiice_address,\n          vendor_state,\n          vendor_lga,\n          vendor_phone,\n          vendor_email,\n          vendor_tin,\n          vendor_profile,\n          vendor_bn_rc,\n          contact_name,\n          contact_address,\n          contact_state,\n          contact_password,\n          contact_phone,\n          contact_email,\n          contact_lga,\n          vendor_id,\n        }\n      }\n    );\n\n    res.status(200).json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to get vendors' });\n  }\n};\n"],"mappings":";;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,IAAMC,EAAE,GAAGD,OAAO,CAAC,WAAW,CAAC;AAE/BE,MAAM,CAACC,OAAO,CAACC,YAAY;EAAA,IAAAC,IAAA,OAAAC,kBAAA,2BAAAC,YAAA,YAAAC,IAAA,CAAG,SAAAC,QAAOC,GAAG,EAAEC,GAAG;IAAA,IAAAC,SAAA,EAAAC,oBAAA,EAAAC,UAAA,EAAAC,YAAA,EAAAC,EAAA,EAAAC,qBAAA,EAAAC,WAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,YAAA,EAAAC,oBAAA,EAAAC,UAAA,EAAAC,qBAAA,EAAAC,YAAA,EAAAC,qBAAA,EAAAC,YAAA,EAAAC,oBAAA,EAAAC,UAAA,EAAAC,qBAAA,EAAAC,cAAA,EAAAC,qBAAA,EAAAC,YAAA,EAAAC,qBAAA,EAAAC,YAAA,EAAAC,qBAAA,EAAAC,eAAA,EAAAC,qBAAA,EAAAC,aAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,aAAA,EAAAC,qBAAA,EAAAC,aAAA,EAAAC,qBAAA,EAAAC,WAAA,EAAAC,mBAAA,EAAAC,SAAA,EAAAC,qBAAA,EAAAC,IAAA;IAAA,OAAA7C,YAAA,YAAA8C,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA7C,SAAA,GAqBvCF,GAAG,CAACgD,IAAI,EAAA7C,oBAAA,GAAAD,SAAA,CAnBVE,UAAU,EAAVA,UAAU,GAAAD,oBAAA,cAAG,QAAQ,GAAAA,oBAAA,EAAAE,YAAA,GAAAH,SAAA,CACrBI,EAAE,EAAFA,EAAE,GAAAD,YAAA,cAAG,IAAI,GAAAA,YAAA,EAAAE,qBAAA,GAAAL,SAAA,CACTM,WAAW,EAAXA,WAAW,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,qBAAA,GAAAP,SAAA,CAClBQ,qBAAqB,EAArBA,qBAAqB,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,qBAAA,GAAAT,SAAA,CAC5BU,YAAY,EAAZA,YAAY,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,oBAAA,GAAAX,SAAA,CACnBY,UAAU,EAAVA,UAAU,GAAAD,oBAAA,cAAG,IAAI,GAAAA,oBAAA,EAAAE,qBAAA,GAAAb,SAAA,CACjBc,YAAY,EAAZA,YAAY,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,qBAAA,GAAAf,SAAA,CACnBgB,YAAY,EAAZA,YAAY,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,oBAAA,GAAAjB,SAAA,CACnBkB,UAAU,EAAVA,UAAU,GAAAD,oBAAA,cAAG,IAAI,GAAAA,oBAAA,EAAAE,qBAAA,GAAAnB,SAAA,CACjBoB,cAAc,EAAdA,cAAc,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,qBAAA,GAAArB,SAAA,CACrBsB,YAAY,EAAZA,YAAY,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,qBAAA,GAAAvB,SAAA,CACnBwB,YAAY,EAAZA,YAAY,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,qBAAA,GAAAzB,SAAA,CACnB0B,eAAe,EAAfA,eAAe,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,qBAAA,GAAA3B,SAAA,CACtB4B,aAAa,EAAbA,aAAa,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,qBAAA,GAAA7B,SAAA,CACpB8B,gBAAgB,EAAhBA,gBAAgB,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,qBAAA,GAAA/B,SAAA,CACvBgC,aAAa,EAAbA,aAAa,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,qBAAA,GAAAjC,SAAA,CACpBkC,aAAa,EAAbA,aAAa,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,qBAAA,GAAAnC,SAAA,CACpBoC,WAAW,EAAXA,WAAW,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAE,mBAAA,GAAArC,SAAA,CAClBsC,SAAS,EAATA,SAAS,GAAAD,mBAAA,cAAG,IAAI,GAAAA,mBAAA;UAAA,IAGbP,gBAAgB;YAAAa,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAI,MAAA,WACZhD,GAAG,CAACiD,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAAEC,OAAO,EAAE,KAAK;YAAEC,KAAK,EAAE;UAA+B,CAAC,CAAC;QAAA;UAAAR,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAE,IAAA;UAAA,OAIlD1D,MAAM,CAACiE,IAAI,CAACtB,gBAAgB,EAAE,EAAE,CAAC;QAAA;UAA/DS,qBAAqB,GAAAI,QAAA,CAAAU,IAAA;UAAAV,QAAA,CAAAE,IAAA;UAAA,OAERxD,EAAE,CAACiE,SAAS,CAACC,KAAK,4eAqBnC;YACEC,YAAY,EAAE;cACZtD,UAAU,EAAVA,UAAU;cACVE,EAAE,EAAFA,EAAE;cACFE,WAAW,EAAXA,WAAW;cACXE,qBAAqB,EAArBA,qBAAqB;cACrBE,YAAY,EAAZA,YAAY;cACZE,UAAU,EAAVA,UAAU;cACVE,YAAY,EAAZA,YAAY;cACZE,YAAY,EAAZA,YAAY;cACZE,UAAU,EAAVA,UAAU;cACVE,cAAc,EAAdA,cAAc;cACdE,YAAY,EAAZA,YAAY;cACZE,YAAY,EAAZA,YAAY;cACZE,eAAe,EAAfA,eAAe;cACfE,aAAa,EAAbA,aAAa;cACbE,gBAAgB,EAAES,qBAAqB;cACvCP,aAAa,EAAbA,aAAa;cACbE,aAAa,EAAbA,aAAa;cACbE,WAAW,EAAXA,WAAW;cACXE,SAAS,EAATA;YACF;UACF,CACF,CAAC;QAAA;UA5CKE,IAAI,GAAAG,QAAA,CAAAU,IAAA;UA8CVtD,GAAG,CAACiD,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAAEC,OAAO,EAAE,IAAI;YAAEO,OAAO,EAAEjB;UAAK,CAAC,CAAC;UAACG,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAe,EAAA,GAAAf,QAAA;UAEvDgB,OAAO,CAACR,KAAK,CAAAR,QAAA,CAAAe,EAAI,CAAC;UAClB3D,GAAG,CAACiD,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAAEC,OAAO,EAAE,KAAK;YAAEC,KAAK,EAAE;UAA0B,CAAC,CAAC;QAAC;QAAA;UAAA,OAAAR,QAAA,CAAAiB,IAAA;MAAA;IAAA,GAAA/D,OAAA;EAAA,CAE9E;EAAA,iBAAAgE,EAAA,EAAAC,GAAA;IAAA,OAAArE,IAAA,CAAAsE,KAAA,OAAAC,SAAA;EAAA;AAAA;AAED1E,MAAM,CAACC,OAAO,CAAC0E,UAAU;EAAA,IAAAC,KAAA,OAAAxE,kBAAA,2BAAAC,YAAA,YAAAC,IAAA,CAAG,SAAAuE,SAAOrE,GAAG,EAAEC,GAAG;IAAA,IAAAqE,UAAA,EAAAC,qBAAA,EAAAnE,UAAA,EAAAoE,aAAA,EAAAlE,EAAA,EAAAmE,qBAAA,EAAAjE,WAAA,EAAAkE,qBAAA,EAAAhE,qBAAA,EAAAiE,qBAAA,EAAA/D,YAAA,EAAAgE,qBAAA,EAAA9D,UAAA,EAAA+D,qBAAA,EAAA7D,YAAA,EAAA8D,qBAAA,EAAA5D,YAAA,EAAA6D,qBAAA,EAAA3D,UAAA,EAAA4D,qBAAA,EAAA1D,cAAA,EAAA2D,qBAAA,EAAAzD,YAAA,EAAA0D,qBAAA,EAAAxD,YAAA,EAAAyD,qBAAA,EAAAvD,eAAA,EAAAwD,qBAAA,EAAAtD,aAAA,EAAAuD,qBAAA,EAAArD,gBAAA,EAAAsD,qBAAA,EAAApD,aAAA,EAAAqD,qBAAA,EAAAnD,aAAA,EAAAoD,qBAAA,EAAAlD,WAAA,EAAAmD,oBAAA,EAAAjD,SAAA,EAAAE,IAAA;IAAA,OAAA7C,YAAA,YAAA8C,IAAA,UAAA+C,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAA7C,IAAA,GAAA6C,SAAA,CAAA5C,IAAA;QAAA;UAAAuB,UAAA,GAqBrCtE,GAAG,CAACyD,KAAK,EAAAc,qBAAA,GAAAD,UAAA,CAnBXlE,UAAU,EAAVA,UAAU,GAAAmE,qBAAA,cAAG,QAAQ,GAAAA,qBAAA,EAAAC,aAAA,GAAAF,UAAA,CACrBhE,EAAE,EAAFA,EAAE,GAAAkE,aAAA,cAAG,IAAI,GAAAA,aAAA,EAAAC,qBAAA,GAAAH,UAAA,CACT9D,WAAW,EAAXA,WAAW,GAAAiE,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAJ,UAAA,CAClB5D,qBAAqB,EAArBA,qBAAqB,GAAAgE,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAL,UAAA,CAC5B1D,YAAY,EAAZA,YAAY,GAAA+D,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAN,UAAA,CACnBxD,UAAU,EAAVA,UAAU,GAAA8D,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAP,UAAA,CACjBtD,YAAY,EAAZA,YAAY,GAAA6D,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAR,UAAA,CACnBpD,YAAY,EAAZA,YAAY,GAAA4D,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAT,UAAA,CACnBlD,UAAU,EAAVA,UAAU,GAAA2D,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAV,UAAA,CACjBhD,cAAc,EAAdA,cAAc,GAAA0D,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAX,UAAA,CACrB9C,YAAY,EAAZA,YAAY,GAAAyD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAZ,UAAA,CACnB5C,YAAY,EAAZA,YAAY,GAAAwD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAb,UAAA,CACnB1C,eAAe,EAAfA,eAAe,GAAAuD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAd,UAAA,CACtBxC,aAAa,EAAbA,aAAa,GAAAsD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAf,UAAA,CACpBtC,gBAAgB,EAAhBA,gBAAgB,GAAAqD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAhB,UAAA,CACvBpC,aAAa,EAAbA,aAAa,GAAAoD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAjB,UAAA,CACpBlC,aAAa,EAAbA,aAAa,GAAAmD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,qBAAA,GAAAlB,UAAA,CACpBhC,WAAW,EAAXA,WAAW,GAAAkD,qBAAA,cAAG,IAAI,GAAAA,qBAAA,EAAAC,oBAAA,GAAAnB,UAAA,CAClB9B,SAAS,EAATA,SAAS,GAAAiD,oBAAA,cAAG,IAAI,GAAAA,oBAAA;UAAAE,SAAA,CAAA7C,IAAA;UAAA6C,SAAA,CAAA5C,IAAA;UAAA,OAGGxD,EAAE,CAACiE,SAAS,CAACC,KAAK,4eAqBnC;YACEC,YAAY,EAAE;cACZtD,UAAU,EAAVA,UAAU;cACVE,EAAE,EAAFA,EAAE;cACFE,WAAW,EAAXA,WAAW;cACXE,qBAAqB,EAArBA,qBAAqB;cACrBE,YAAY,EAAZA,YAAY;cACZE,UAAU,EAAVA,UAAU;cACVE,YAAY,EAAZA,YAAY;cACZE,YAAY,EAAZA,YAAY;cACZE,UAAU,EAAVA,UAAU;cACVE,cAAc,EAAdA,cAAc;cACdE,YAAY,EAAZA,YAAY;cACZE,YAAY,EAAZA,YAAY;cACZE,eAAe,EAAfA,eAAe;cACfE,aAAa,EAAbA,aAAa;cACbE,gBAAgB,EAAhBA,gBAAgB;cAChBE,aAAa,EAAbA,aAAa;cACbE,aAAa,EAAbA,aAAa;cACbE,WAAW,EAAXA,WAAW;cACXE,SAAS,EAATA;YACF;UACF,CACF,CAAC;QAAA;UA5CKE,IAAI,GAAAiD,SAAA,CAAApC,IAAA;UA8CVtD,GAAG,CAACiD,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAAEC,OAAO,EAAE,IAAI;YAAEO,OAAO,EAAEjB;UAAK,CAAC,CAAC;UAACiD,SAAA,CAAA5C,IAAA;UAAA;QAAA;UAAA4C,SAAA,CAAA7C,IAAA;UAAA6C,SAAA,CAAA/B,EAAA,GAAA+B,SAAA;UAEvD9B,OAAO,CAACR,KAAK,CAAAsC,SAAA,CAAA/B,EAAI,CAAC;UAClB3D,GAAG,CAACiD,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAAEC,OAAO,EAAE,KAAK;YAAEC,KAAK,EAAE;UAAwB,CAAC,CAAC;QAAC;QAAA;UAAA,OAAAsC,SAAA,CAAA7B,IAAA;MAAA;IAAA,GAAAO,QAAA;EAAA,CAE5E;EAAA,iBAAAuB,GAAA,EAAAC,GAAA;IAAA,OAAAzB,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA","ignoreList":[]}