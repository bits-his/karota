{"version":3,"file":"registered_rides.js","names":["db","require","module","exports","registered_rides","req","res","_req$body","body","_req$body$id","id","_req$body$name","name","_req$body$middle_name","middle_name","_req$body$surname","surname","_req$body$gender","gender","_req$body$status","status","_req$body$nationality","nationality","_req$body$state_of_or","state_of_origin","_req$body$lg","lg","_req$body$date_of_bir","date_of_birth","_req$body$place_of_bi","place_of_birth","_req$body$phone_no","phone_no","_req$body$blood_group","blood_group","_req$body$genotype","genotype","_req$body$address","address","_req$body$NIN_number","NIN_number","_req$body$next_of_kin","next_of_king","_req$body$next_of_kin2","next_of_king_address","_req$body$phone_no2","phone_no2","_req$body$plate_numbe","plate_number","_req$body$classes_num","classes_number","_req$body$side_number","side_number","_req$body$phone_no3","phone_no3","_req$body$name_of_com","name_of_company","_req$query$query_type","query","query_type","sequelize","replacements","then","results","json","success","err","console","log","getregistered_rides","_req$body2","_req$body2$id","_req$body2$name","_req$body2$middle_nam","_req$body2$surname","_req$body2$gender","_req$body2$status","_req$body2$nationalit","_req$body2$state_of_o","_req$body2$lg","_req$body2$date_of_bi","_req$body2$place_of_b","_req$body2$phone_no","_req$body2$blood_grou","_req$body2$genotype","_req$body2$address","_req$body2$NIN_number","_req$body2$next_of_ki","_req$body2$next_of_ki2","_req$body2$phone_no2","_req$body2$plate_numb","_req$body2$classes_nu","_req$body2$side_numbe","_req$body2$phone_no3","_req$body2$name_of_co","_req$query$query_type2"],"sources":["../../src/controllers/registered_rides.js"],"sourcesContent":["const db = require(\"../models\");\n\nmodule.exports.registered_rides = (req, res) => {\n  // const {  } = req.body;\n  const {\n    id = null,\n    name = null,\n    middle_name = null,\n    surname = null,\n    gender = null,\n    status = null,\n    nationality = null,\n    state_of_origin = null,\n    lg = null,\n    date_of_birth = null,\n    place_of_birth = null,\n    phone_no = null,\n    blood_group = null,\n    genotype = null,\n    address = null,\n    NIN_number = null,\n    next_of_king = null,\n    next_of_king_address = null,\n    phone_no2 = null,\n    plate_number = null,\n    classes_number = null,\n    side_number = null,\n    phone_no3 = null,\n    name_of_company = null,\n  } = req.body;\n  const { query_type = \"create\" } = req.query;\n  db.sequelize\n    .query(\n      `call registered_rides(:id,:query_type,:name,:middle_name,:surname,:gender,:status,:nationality,:state_of_origin,:lg,:date_of_birth,:place_of_birth,:phone_no,:blood_group,:genotype,:address,:NIN_number,:next_of_king,:next_of_king_address,:phone_no2,:plate_number,:classes_number,:side_number,:phone_no3,:name_of_company,:qrcode)`,\n      {\n        replacements: {\n          name,\n          middle_name,\n          surname,\n          gender,\n          status,\n          nationality,\n          state_of_origin,\n          lg,\n          date_of_birth,\n          place_of_birth,\n          phone_no,\n          blood_group,\n          genotype,\n          address,\n          NIN_number,\n          next_of_king,\n          next_of_king_address,\n          phone_no2,\n          plate_number,\n          classes_number,\n          side_number,\n          phone_no3,\n          name_of_company,\n          query_type,\n        },\n      }\n    )\n    .then((results) => res.json({ success: true, results }))\n    .catch((err) => {\n      console.log(err);\n      res.status(500).json({ success: false });\n    });\n};\n\n\nmodule.exports.getregistered_rides = (req, res) => {\n  // const {  } = req.body;\n  const {\n    id = null,\n    name = null,\n    middle_name = null,\n    surname = null,\n    gender = null,\n    status = null,\n    nationality = null,\n    state_of_origin = null,\n    lg = null,\n    date_of_birth = null,\n    place_of_birth = null,\n    phone_no = null,\n    blood_group = null,\n    genotype = null,\n    address = null,\n    NIN_number = null,\n    next_of_king = null,\n    next_of_king_address = null,\n    phone_no2 = null,\n    plate_number = null,\n    classes_number = null,\n    side_number = null,\n    phone_no3 = null,\n    name_of_company = null,\n  } = req.body;\n  const { query_type = \"create\" } = req.query;\n  db.sequelize\n    .query(\n      `call registered_rides(:id,:query_type,:name,:middle_name,:surname,:gender,:status,:nationality,:state_of_origin,:lg,:date_of_birth,:place_of_birth,:phone_no,:blood_group,:genotype,:address,:NIN_number,:next_of_king,:next_of_king_address,:phone_no2,:plate_number,:classes_number,:side_number,:phone_no3,:name_of_company,:qrcode)`,\n      {\n        replacements: {\n          id,\n          name,\n          middle_name,\n          surname,\n          gender,\n          status,\n          nationality,\n          state_of_origin,\n          lg,\n          date_of_birth,\n          place_of_birth,\n          phone_no,\n          blood_group,\n          genotype,\n          address,\n          NIN_number,\n          next_of_king,\n          next_of_king_address,\n          phone_no2,\n          plate_number,\n          classes_number,\n          side_number,\n          phone_no3,\n          name_of_company,\n          query_type,\n        },\n      }\n    )\n    .then((results) => res.json({ success: true, results }))\n    .catch((err) => {\n      console.log(err);\n      res.status(500).json({ success: false });\n    });\n};\n\n\n\n"],"mappings":";;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,WAAW,CAAC;AAE/BC,MAAM,CAACC,OAAO,CAACC,gBAAgB,GAAG,UAACC,GAAG,EAAEC,GAAG,EAAK;EAC9C;EACA,IAAAC,SAAA,GAyBIF,GAAG,CAACG,IAAI;IAAAC,YAAA,GAAAF,SAAA,CAxBVG,EAAE;IAAFA,EAAE,GAAAD,YAAA,cAAG,IAAI,GAAAA,YAAA;IAAAE,cAAA,GAAAJ,SAAA,CACTK,IAAI;IAAJA,IAAI,GAAAD,cAAA,cAAG,IAAI,GAAAA,cAAA;IAAAE,qBAAA,GAAAN,SAAA,CACXO,WAAW;IAAXA,WAAW,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,iBAAA,GAAAR,SAAA,CAClBS,OAAO;IAAPA,OAAO,GAAAD,iBAAA,cAAG,IAAI,GAAAA,iBAAA;IAAAE,gBAAA,GAAAV,SAAA,CACdW,MAAM;IAANA,MAAM,GAAAD,gBAAA,cAAG,IAAI,GAAAA,gBAAA;IAAAE,gBAAA,GAAAZ,SAAA,CACba,MAAM;IAANA,MAAM,GAAAD,gBAAA,cAAG,IAAI,GAAAA,gBAAA;IAAAE,qBAAA,GAAAd,SAAA,CACbe,WAAW;IAAXA,WAAW,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,qBAAA,GAAAhB,SAAA,CAClBiB,eAAe;IAAfA,eAAe,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,YAAA,GAAAlB,SAAA,CACtBmB,EAAE;IAAFA,EAAE,GAAAD,YAAA,cAAG,IAAI,GAAAA,YAAA;IAAAE,qBAAA,GAAApB,SAAA,CACTqB,aAAa;IAAbA,aAAa,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,qBAAA,GAAAtB,SAAA,CACpBuB,cAAc;IAAdA,cAAc,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,kBAAA,GAAAxB,SAAA,CACrByB,QAAQ;IAARA,QAAQ,GAAAD,kBAAA,cAAG,IAAI,GAAAA,kBAAA;IAAAE,qBAAA,GAAA1B,SAAA,CACf2B,WAAW;IAAXA,WAAW,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,kBAAA,GAAA5B,SAAA,CAClB6B,QAAQ;IAARA,QAAQ,GAAAD,kBAAA,cAAG,IAAI,GAAAA,kBAAA;IAAAE,iBAAA,GAAA9B,SAAA,CACf+B,OAAO;IAAPA,OAAO,GAAAD,iBAAA,cAAG,IAAI,GAAAA,iBAAA;IAAAE,oBAAA,GAAAhC,SAAA,CACdiC,UAAU;IAAVA,UAAU,GAAAD,oBAAA,cAAG,IAAI,GAAAA,oBAAA;IAAAE,qBAAA,GAAAlC,SAAA,CACjBmC,YAAY;IAAZA,YAAY,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,sBAAA,GAAApC,SAAA,CACnBqC,oBAAoB;IAApBA,oBAAoB,GAAAD,sBAAA,cAAG,IAAI,GAAAA,sBAAA;IAAAE,mBAAA,GAAAtC,SAAA,CAC3BuC,SAAS;IAATA,SAAS,GAAAD,mBAAA,cAAG,IAAI,GAAAA,mBAAA;IAAAE,qBAAA,GAAAxC,SAAA,CAChByC,YAAY;IAAZA,YAAY,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,qBAAA,GAAA1C,SAAA,CACnB2C,cAAc;IAAdA,cAAc,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,qBAAA,GAAA5C,SAAA,CACrB6C,WAAW;IAAXA,WAAW,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,mBAAA,GAAA9C,SAAA,CAClB+C,SAAS;IAATA,SAAS,GAAAD,mBAAA,cAAG,IAAI,GAAAA,mBAAA;IAAAE,qBAAA,GAAAhD,SAAA,CAChBiD,eAAe;IAAfA,eAAe,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;EAExB,IAAAE,qBAAA,GAAkCpD,GAAG,CAACqD,KAAK,CAAnCC,UAAU;IAAVA,UAAU,GAAAF,qBAAA,cAAG,QAAQ,GAAAA,qBAAA;EAC7BzD,EAAE,CAAC4D,SAAS,CACTF,KAAK,4UAEJ;IACEG,YAAY,EAAE;MACZjD,IAAI,EAAJA,IAAI;MACJE,WAAW,EAAXA,WAAW;MACXE,OAAO,EAAPA,OAAO;MACPE,MAAM,EAANA,MAAM;MACNE,MAAM,EAANA,MAAM;MACNE,WAAW,EAAXA,WAAW;MACXE,eAAe,EAAfA,eAAe;MACfE,EAAE,EAAFA,EAAE;MACFE,aAAa,EAAbA,aAAa;MACbE,cAAc,EAAdA,cAAc;MACdE,QAAQ,EAARA,QAAQ;MACRE,WAAW,EAAXA,WAAW;MACXE,QAAQ,EAARA,QAAQ;MACRE,OAAO,EAAPA,OAAO;MACPE,UAAU,EAAVA,UAAU;MACVE,YAAY,EAAZA,YAAY;MACZE,oBAAoB,EAApBA,oBAAoB;MACpBE,SAAS,EAATA,SAAS;MACTE,YAAY,EAAZA,YAAY;MACZE,cAAc,EAAdA,cAAc;MACdE,WAAW,EAAXA,WAAW;MACXE,SAAS,EAATA,SAAS;MACTE,eAAe,EAAfA,eAAe;MACfG,UAAU,EAAVA;IACF;EACF,CACF,CAAC,CACAG,IAAI,CAAC,UAACC,OAAO;IAAA,OAAKzD,GAAG,CAAC0D,IAAI,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEF,OAAO,EAAPA;IAAQ,CAAC,CAAC;EAAA,EAAC,SAClD,CAAC,UAACG,GAAG,EAAK;IACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAChB5D,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAAC4C,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAM,CAAC,CAAC;EAC1C,CAAC,CAAC;AACN,CAAC;AAGD/D,MAAM,CAACC,OAAO,CAACkE,mBAAmB,GAAG,UAAChE,GAAG,EAAEC,GAAG,EAAK;EACjD;EACA,IAAAgE,UAAA,GAyBIjE,GAAG,CAACG,IAAI;IAAA+D,aAAA,GAAAD,UAAA,CAxBV5D,EAAE;IAAFA,EAAE,GAAA6D,aAAA,cAAG,IAAI,GAAAA,aAAA;IAAAC,eAAA,GAAAF,UAAA,CACT1D,IAAI;IAAJA,IAAI,GAAA4D,eAAA,cAAG,IAAI,GAAAA,eAAA;IAAAC,qBAAA,GAAAH,UAAA,CACXxD,WAAW;IAAXA,WAAW,GAAA2D,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAC,kBAAA,GAAAJ,UAAA,CAClBtD,OAAO;IAAPA,OAAO,GAAA0D,kBAAA,cAAG,IAAI,GAAAA,kBAAA;IAAAC,iBAAA,GAAAL,UAAA,CACdpD,MAAM;IAANA,MAAM,GAAAyD,iBAAA,cAAG,IAAI,GAAAA,iBAAA;IAAAC,iBAAA,GAAAN,UAAA,CACblD,MAAM;IAANA,MAAM,GAAAwD,iBAAA,cAAG,IAAI,GAAAA,iBAAA;IAAAC,qBAAA,GAAAP,UAAA,CACbhD,WAAW;IAAXA,WAAW,GAAAuD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAC,qBAAA,GAAAR,UAAA,CAClB9C,eAAe;IAAfA,eAAe,GAAAsD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAC,aAAA,GAAAT,UAAA,CACtB5C,EAAE;IAAFA,EAAE,GAAAqD,aAAA,cAAG,IAAI,GAAAA,aAAA;IAAAC,qBAAA,GAAAV,UAAA,CACT1C,aAAa;IAAbA,aAAa,GAAAoD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAC,qBAAA,GAAAX,UAAA,CACpBxC,cAAc;IAAdA,cAAc,GAAAmD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAC,mBAAA,GAAAZ,UAAA,CACrBtC,QAAQ;IAARA,QAAQ,GAAAkD,mBAAA,cAAG,IAAI,GAAAA,mBAAA;IAAAC,qBAAA,GAAAb,UAAA,CACfpC,WAAW;IAAXA,WAAW,GAAAiD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAC,mBAAA,GAAAd,UAAA,CAClBlC,QAAQ;IAARA,QAAQ,GAAAgD,mBAAA,cAAG,IAAI,GAAAA,mBAAA;IAAAC,kBAAA,GAAAf,UAAA,CACfhC,OAAO;IAAPA,OAAO,GAAA+C,kBAAA,cAAG,IAAI,GAAAA,kBAAA;IAAAC,qBAAA,GAAAhB,UAAA,CACd9B,UAAU;IAAVA,UAAU,GAAA8C,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAC,qBAAA,GAAAjB,UAAA,CACjB5B,YAAY;IAAZA,YAAY,GAAA6C,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAC,sBAAA,GAAAlB,UAAA,CACnB1B,oBAAoB;IAApBA,oBAAoB,GAAA4C,sBAAA,cAAG,IAAI,GAAAA,sBAAA;IAAAC,oBAAA,GAAAnB,UAAA,CAC3BxB,SAAS;IAATA,SAAS,GAAA2C,oBAAA,cAAG,IAAI,GAAAA,oBAAA;IAAAC,qBAAA,GAAApB,UAAA,CAChBtB,YAAY;IAAZA,YAAY,GAAA0C,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAC,qBAAA,GAAArB,UAAA,CACnBpB,cAAc;IAAdA,cAAc,GAAAyC,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAC,qBAAA,GAAAtB,UAAA,CACrBlB,WAAW;IAAXA,WAAW,GAAAwC,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAC,oBAAA,GAAAvB,UAAA,CAClBhB,SAAS;IAATA,SAAS,GAAAuC,oBAAA,cAAG,IAAI,GAAAA,oBAAA;IAAAC,qBAAA,GAAAxB,UAAA,CAChBd,eAAe;IAAfA,eAAe,GAAAsC,qBAAA,cAAG,IAAI,GAAAA,qBAAA;EAExB,IAAAC,sBAAA,GAAkC1F,GAAG,CAACqD,KAAK,CAAnCC,UAAU;IAAVA,UAAU,GAAAoC,sBAAA,cAAG,QAAQ,GAAAA,sBAAA;EAC7B/F,EAAE,CAAC4D,SAAS,CACTF,KAAK,4UAEJ;IACEG,YAAY,EAAE;MACZnD,EAAE,EAAFA,EAAE;MACFE,IAAI,EAAJA,IAAI;MACJE,WAAW,EAAXA,WAAW;MACXE,OAAO,EAAPA,OAAO;MACPE,MAAM,EAANA,MAAM;MACNE,MAAM,EAANA,MAAM;MACNE,WAAW,EAAXA,WAAW;MACXE,eAAe,EAAfA,eAAe;MACfE,EAAE,EAAFA,EAAE;MACFE,aAAa,EAAbA,aAAa;MACbE,cAAc,EAAdA,cAAc;MACdE,QAAQ,EAARA,QAAQ;MACRE,WAAW,EAAXA,WAAW;MACXE,QAAQ,EAARA,QAAQ;MACRE,OAAO,EAAPA,OAAO;MACPE,UAAU,EAAVA,UAAU;MACVE,YAAY,EAAZA,YAAY;MACZE,oBAAoB,EAApBA,oBAAoB;MACpBE,SAAS,EAATA,SAAS;MACTE,YAAY,EAAZA,YAAY;MACZE,cAAc,EAAdA,cAAc;MACdE,WAAW,EAAXA,WAAW;MACXE,SAAS,EAATA,SAAS;MACTE,eAAe,EAAfA,eAAe;MACfG,UAAU,EAAVA;IACF;EACF,CACF,CAAC,CACAG,IAAI,CAAC,UAACC,OAAO;IAAA,OAAKzD,GAAG,CAAC0D,IAAI,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEF,OAAO,EAAPA;IAAQ,CAAC,CAAC;EAAA,EAAC,SAClD,CAAC,UAACG,GAAG,EAAK;IACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAChB5D,GAAG,CAACc,MAAM,CAAC,GAAG,CAAC,CAAC4C,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAM,CAAC,CAAC;EAC1C,CAAC,CAAC;AACN,CAAC","ignoreList":[]}