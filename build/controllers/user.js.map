{"version":3,"sources":["../../src/controllers/user.js"],"names":["bcrypt","require","jwt","Op","db","User","config","validateRegisterForm","validateLoginForm","module","exports","create","req","res","body","errors","isValid","name","username","account_type","email","phone","password","status","role","json","findAll","where","then","user","length","newUser","genSalt","err","salt","hash","catch","login","or","originalPassword","dataValues","compare","isMatch","console","log","id","payload","sign","process","env","JWT_SECRET_KEY","expiresIn","token","success","findAllUsers","findById","params","userId","msg","update","firstname","lastname","HospitalId","image","deleteUser","destroy","verifyToken","authToken","headers","startsWith","slice","decoded","verify","findOne","sequelize","query","profile","error"],"mappings":"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","file":"user.js","sourcesContent":["const bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst { Op } = require('sequelize');\nconst db = require('../models');\nconst User = db.User;\nrequire('dotenv').config();\n\n// load input validation\nconst validateRegisterForm = require('../validation/register');\nconst validateLoginForm = require('../validation/login');\n\n// create user\nmodule.exports.create = (req, res) => {\n  const { errors, isValid } = validateRegisterForm(req.body);\n  let {\n    name,\n    username,\n    account_type,\n    email,\n    phone,\n    password,\n    status,\n    role,\n  } = req.body;\n\n  // check validation\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  User.findAll({ where: { email } }).then(user => {\n    if (user.length) {\n      return res.status(400).json({ email: 'Email already exists!' });\n    } else {\n      let newUser = {\n        name,\n        username,\n        account_type,\n        email,\n        phone,\n        password,\n        status,\n        role,\n      };\n      bcrypt.genSalt(10, (err, salt) => {\n        bcrypt.hash(newUser.password, salt, (err, hash) => {\n          if (err) throw err;\n          newUser.password = hash;\n          User.create(newUser)\n            .then(user => {\n              res.json({ user });\n            })\n            .catch(err => {\n              res.status(500).json({ err });\n            });\n        });\n      });\n    }\n  });\n};\n\nmodule.exports.login = (req, res) => {\n  const { errors, isValid } = validateLoginForm(req.body);\n\n  // check validation\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  const { username, password } = req.body;\n\n  User.findAll({\n    where: {\n      [Op.or]: [\n        { email: username },\n        { phone: username }\n      ]\n    }\n  })\n    .then(user => {\n\n      //check for user\n      if (!user.length) {\n        errors.email = 'User not found!';\n        return res.status(404).json(errors);\n      }\n\n      let originalPassword = user[0].dataValues.password\n\n      //check for password\n      bcrypt\n        .compare(password, originalPassword)\n        .then(isMatch => {\n          if (isMatch) {\n            // user matched\n            console.log('matched!')\n            const { id, username } = user[0].dataValues;\n            const payload = { id, username }; //jwt payload\n            // console.log(payload)\n\n            jwt.sign(payload, process.env.JWT_SECRET_KEY, {\n              expiresIn: 3600\n            }, (err, token) => {\n              res.json({\n                success: true,\n                token: 'Bearer ' + token,\n                role: user[0].dataValues.role\n              });\n            });\n          } else {\n            errors.password = 'Password not correct';\n            return res.status(400).json(errors);\n          }\n        }).catch(err => console.log(err));\n    }).catch(err => res.status(500).json({ err }));\n};\n\n// fetch all users\nmodule.exports.findAllUsers = (req, res) => {\n  User.findAll()\n    .then(user => {\n      res.json({ user });\n    })\n    .catch(err => res.status(500).json({ err }));\n};\n\n// fetch user by userId\nmodule.exports.findById = (req, res) => {\n  const id = req.params.userId;\n\n  User.findAll({ where: { id } })\n    .then(user => {\n      if (!user.length) {\n        return res.json({ msg: 'user not found' })\n      }\n      res.json({ user })\n    })\n    .catch(err => res.status(500).json({ err }));\n};\n\n// update a user's info\nmodule.exports.update = (req, res) => {\n  let { firstname, lastname, HospitalId, role, image } = req.body;\n  const id = req.params.userId;\n\n  User.update(\n    {\n      firstname,\n      lastname,\n      role,\n    },\n    { where: { id } }\n  )\n    .then(user => res.status(200).json({ user }))\n    .catch(err => res.status(500).json({ err }));\n};\n\n// delete a user\nmodule.exports.deleteUser = (req, res) => {\n  const id = req.params.userId;\n\n  User.destroy({ where: { id } })\n    .then(() => res.status.json({ msg: 'User has been deleted successfully!' }))\n    .catch(err => res.status(500).json({ msg: 'Failed to delete!' }));\n};\n\n\nmodule.exports.verifyToken = async function (req, res) {\n  const authToken = req.headers[\"authorization\"];\n\n  if (!authToken || !authToken.startsWith(\"Bearer \")) {\n    return res.status(401).json({\n      success: false,\n      msg: \"Invalid or missing token\",\n    });\n  }\n\n  const token = authToken.slice(7); // Remove \"Bearer \" from the token string\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);\n    const { id } = decoded;\n\n    const user = await db.User.findOne({\n      where: {\n        id,\n      },\n    });\n\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        msg: \"User not found\",\n      });\n    }\n\n    const profile = await db.sequelize.query(\n      `SELECT * FROM ${user.role}s WHERE user_id=${user.id}`\n    );\n\n    res.json({\n      success: true,\n      user,\n      profile: profile[0],\n    });\n  } catch (err) {\n    console.error(err);\n    return res.status(401).json({\n      success: false,\n      msg: \"Failed to authenticate token\",\n    });\n  }\n};\n"]}