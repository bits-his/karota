{"version":3,"sources":["../../src/controllers/super_agents.js"],"names":["bcrypt","require","db","User","module","exports","superAgent","req","res","body","query_type","id","name","phone","email","address","vendor","state","lga","nin","console","log","sequelize","query","replacements","resp","status","json","success","results","error","fetchSuperAgent"],"mappings":"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","file":"super_agents.js","sourcesContent":["const bcrypt = require('bcryptjs')\nconst db = require('../models');\nconst User = db.User;\n\n\nmodule.exports.superAgent = async (req, res) => {\n  const {\n    query_type = \"insert\",\n    id = null,\n    name = null,\n    phone = null,\n    email = null,\n    address = null,\n    vendor = null,\n    state = null,\n    lga = null,\n    nin = null\n  } = req.body;\n  console.log(req.body)\n\n\n  try {\n    const resp = await db.sequelize.query(\n      `CALL super_agents(:query_type, \n        :id, \n        :name,\n            :phone,\n            :email,\n            :address,\n            :vendor,\n            :state,\n            :lga,\n            :nin)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          name,\n          phone,\n          email,\n          address,\n          vendor,\n          state,\n          lga,\n          nin\n        },\n      }\n    );\n\n    res.status(200).json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res\n      .status(500)\n      .json({ success: false, error: \"Failed to register super agent\" });\n  }\n  // } catch (err) {\n  //   res.status(500).json({ success: false, error: \"Internal error occured.\" });\n  // }\n}\n\n//   @ Fetch a single super agent by ID\n//   @route GET /api/superagent/:id\nmodule.exports.fetchSuperAgent = async (req, res) => {\n  const {\n    query_type = \"select_all\",\n    id = null,\n    name = null,\n    phone = null,\n    email = null,\n    address = null,\n    vendor = null,\n    state = null,\n    lga = null,\n    nin = null\n  } = req.query;\n\n  try {\n    const resp = await db.sequelize.query(\n      `CALL super_agents(:query_type, \n        :id, \n        :name,\n            :phone,\n            :email,\n            :address,\n            :vendor,\n            :state,\n            :lga,\n            :nin)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          name,\n          phone,\n          email,\n          address,\n          vendor,\n          state,\n          lga,\n          nin\n        },\n      }\n    );\n\n\n    res.json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res\n      .status(500)\n      .json({ success: false, error: \"Failed to register super agent\" });\n  }\n}"]}