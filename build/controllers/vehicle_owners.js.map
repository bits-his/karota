{"version":3,"sources":["../../src/controllers/vehicle_owners.js"],"names":["db","require","module","exports","saveVehicleOwners","req","res","body","query_type","id","user_id","name","address","phone","email","state","lga","password","sequelize","query","replacements","then","resp","status","json","success","data","catch","console","error","err","getVehicleOwners"],"mappings":"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","file":"vehicle_owners.js","sourcesContent":["const db = require('../models');\n\n\nmodule.exports.saveVehicleOwners = (req, res) => {\n    const {\n        query_type = null,\n        id = null,\n        user_id = null,\n        name = null,\n        address = null,\n        phone = null,\n        email = null,\n        state = null,\n        lga = null,\n        password = null,\n    } = req.body\n    db.sequelize.query(`CALL vehicles_owners(\n            :query_type,\n            :id,\n            :user_id,\n            :name,\n            :address,\n            phone,\n            :email,\n            :state,\n            :lga,\n            :password\n        )`, {\n        replacements: {\n            query_type,\n            id,\n            user_id,\n            name,\n            address,\n            phone,\n            email,\n            state,\n            lga,\n            password,\n        }\n    })\n        .then((resp) => {\n            res.status(200).json({ success: true, data: resp });\n        })\n        .catch(err => {\n            console.error(err);\n            res.status(500).json({ success: false, error: 'Operation Failed' });\n        });\n}\n\n\n\n\nmodule.exports.getVehicleOwners = (req, res) => {\n    const {\n        query_type = \"select-all\",\n        id = null,\n        user_id = null,\n        name = null,\n        address = null,\n        phone = null,\n        email = null,\n        state = null,\n        lga = null,\n        password = null,\n    } = req.body\n    db.sequelize.query(`CALL vehicles_owners(\n            :query_type,\n            :id,\n            :user_id,\n            :name,\n            :address,\n            :phone,\n            :email,\n            :state,\n            :lga\n        )`, {\n        replacements: {\n            query_type, \n            id,\n            user_id,\n            name,\n            address,\n            phone,\n            email,\n            state,\n            lga,\n        }\n    })\n        .then((resp) => {\n            res.status(200).json({ success: true, data: resp });\n        })\n        .catch(err => {\n            console.error(err);\n            res.status(500).json({ success: false, error: 'Operation Failed ' });\n        });\n}\n"]}