{"version":3,"sources":["../../src/controllers/vehicles_registration.js"],"names":["db","require","module","exports","registerVehicle","req","res","body","query_type","id","owner_id","lg_reg_no","engine_no","chasis_no","plate_no","manufacturer","manufacturing_date","purchased_date","state_registered","registered_lg","sequelize","query","replacements","resp","status","json","success","data","console","error","getRegVehicles"],"mappings":"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","file":"vehicles_registration.js","sourcesContent":["// const bcrypt from 'bcryptjs';\nconst db = require('../models');\n\nmodule.exports.registerVehicle = async (req, res) => {\n  const {\n    query_type = 'insert',\n    id = null,\n    owner_id = null,\n    lg_reg_no = null,\n    engine_no = null,\n    chasis_no =null,\n    plate_no = null,\n    manufacturer = null,\n    manufacturing_date = null,\n    purchased_date = null,\n    state_registered = null,\n    registered_lg = null,\n  } = req.body;\n\n  try {\n    const resp = await db.sequelize.query(\n      `CALL vehicles(\n        :query_type,  \n        :id, \n       :owner_id, \n       :lg_reg_no,\n        :engine_no, \n        :chasis_no,\n       :plate_no, \n       :manufacturer,\n        :manufacturing_date,\n        :purchased_date, \n       :state_registered,\n        :registered_lg)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          owner_id,\n          lg_reg_no,\n          engine_no,\n          chasis_no,\n          plate_no,\n          manufacturer,\n          manufacturing_date,\n          purchased_date,\n          state_registered,\n          registered_lg\n        }\n      }\n    );\n\n    res.status(200).json({ success: true, data: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to register vehicle' });\n  }\n};\n\n//  @ Get all vendors\n//  @route GET /vendors \nmodule.exports.getRegVehicles = async (req, res) => {\n  const {\n    query_type = 'select',\n    id = null,\n    owner_id = null,\n    lg_reg_no = null,\n    engine_no = null,\n    chasis_no =null,\n    plate_no = null,\n    manufacturer = null,\n    manufacturing_date = null,\n    purchased_date = null,\n    state_registered = null,\n    registered_lg = null,\n  } = req.query;\n\n  try {\n    const resp = await db.sequelize.query(\n      `CALL vehicles(\n        :query_type,  \n        :id, \n       :owner_id, \n       :lg_reg_no,\n        :engine_no,\n        :chasis_no, \n       :plate_no, \n       :manufacturer,\n        :manufacturing_date,\n        :purchased_date, \n       :state_registered,\n        :registered_lg)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          owner_id,\n          lg_reg_no,\n          engine_no,\n          chasis_no,\n          plate_no,\n          manufacturer,\n          manufacturing_date,\n          purchased_date,\n          state_registered,\n          registered_lg\n        }\n      }\n    );\n\n    res.status(200).json({ success: true, data: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to fetch vehicle' });\n  }\n\n};\n\n//       }\n//       res.json({ user })\n//     })\n//     .catch(err => res.status(500).json({ err }));\n// };\n\n\n\n\n"]}