{"version":3,"sources":["../../src/controllers/agents.js"],"names":["db","require","module","exports","createAgent","req","res","body","query_type","id","name","phone","email","address","super_agent","state","lga","sequelize","query","replacements","resp","status","json","success","results","console","error","fetchAgent"],"mappings":"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","file":"agents.js","sourcesContent":["// const bcrypt = require ('bcryptjs';)\nconst db = require('../models');\n\nmodule.exports.createAgent = async (req, res) => {\n  const {\n    query_type = 'insert',\n    id = null,\n    name = null,\n    phone = null,\n    email = null,\n    address = null,\n    super_agent = null,\n    state = null,\n    lga = null\n  } = req.body;\n\n  try {\n    const resp = await db.sequelize.query(\n      `CALL agents(\n      :query_type,\n      :id,\n      :name,\n      :phone,\n      :email,\n      :address,\n      :super_agent,\n      :state,\n      :lga)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          name,\n          phone,\n          email,\n          address,\n          super_agent,\n          state,\n          lga\n        }\n      }\n    );\n\n    res.status(200).json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to fetch agent' });\n  }\n};\n\n//  @ Get all superagent\n//  @route GET /superagent \nmodule.exports.fetchAgent = async (req, res) => {\n  const {\n    query_type = 'select',\n    id = null,\n    name = null,\n    phone = null,\n    email = null,\n    address = null,\n    super_agent = null,\n    state = null,\n    lga = null\n  } = req.query;\n\n  try {\n    const resp = await db.sequelize.query(\n      `CALL agents(\n      :query_type,\n      :id,\n      :name,\n      :phone,\n      :email,\n      :address,\n      :super_agent,\n      :state,\n      :lga)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          name,\n          phone,\n          email,\n          address,\n          super_agent,\n          state,\n          lga\n        }\n      }\n    );\n\n    res.status(200).json({ success: true, results: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to fetch agent' });\n  }\n};\n"]}