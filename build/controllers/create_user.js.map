{"version":3,"sources":["../../src/controllers/create_user.js"],"names":["db","require","module","exports","create_user","req","res","body","id","vehicle_id","name","middle_name","surname","gender","status","nationality","state_of_origin","lg","date_of_birth","place_of_birth","phone_no","blood_group","genotype","address","NIN_number","next_of_king","next_of_king_address","phone_no2","plate_number","classes_number","side_number","phone_no3","name_of_company","qrcode","query","query_type","sequelize","replacements","then","results","json","success","catch","err","console","log","getCreate_user","state_and_local_gvt","type","state","local_gvt"],"mappings":"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","file":"create_user.js","sourcesContent":["const db = require(\"../models\");\n\nmodule.exports.create_user = (req, res) => {\n  // const {  } = req.body;\n  const {\n    id = null,\n    vehicle_id = null,\n    name = null,\n    middle_name = null,\n    surname = null,\n    gender = null,\n    status = null,\n    nationality = null,\n    state_of_origin = null,\n    lg = null,\n    date_of_birth = null,\n    place_of_birth = null,\n    phone_no = null,\n    blood_group = null,\n    genotype = null,\n    address = null,\n    NIN_number = null,\n    next_of_king = null,\n    next_of_king_address = null,\n    phone_no2 = null,\n    plate_number = null,\n    classes_number = null,\n    side_number = null,\n    phone_no3 = null,\n    name_of_company = null,\n    qrcode = null,\n  } = req.body;\n  const { query_type = \"create\" } = req.query;\n  db.sequelize\n    .query(\n      `call create_user(:id,:vehicle_id,:query_type,:name,:middle_name,:surname,:gender,:status,:nationality,:state_of_origin,:lg,:date_of_birth,:place_of_birth,:phone_no,:blood_group,:genotype,:address,:NIN_number,:next_of_king,:next_of_king_address,:phone_no2,:plate_number,:classes_number,:side_number,:phone_no3,:name_of_company,:qrcode)`,\n      {\n        replacements: {\n          id,\n          vehicle_id,\n          query_type,\n          name,\n          middle_name,\n          surname,\n          gender,\n          status,\n          nationality,\n          state_of_origin,\n          lg,\n          date_of_birth,\n          place_of_birth,\n          phone_no,\n          blood_group,\n          genotype,\n          address,\n          NIN_number,\n          next_of_king,\n          next_of_king_address,\n          phone_no2,\n          plate_number,\n          classes_number,\n          side_number,\n          phone_no3,\n          name_of_company,\n          qrcode,\n        },\n      }\n    )\n    .then((results) => res.json({ success: true, results }))\n    .catch((err) => {\n      console.log(err);\n      res.status(500).json({ success: false });\n    });\n};\n\nmodule.exports.getCreate_user = (req, res) => {\n  // const {  } = req.body;\n  const {\n    id = null,\n    vehicle_id = null,\n    name = null,\n    middle_name = null,\n    surname = null,\n    gender = null,\n    status = null,\n    nationality = null,\n    state_of_origin = null,\n    lg = null,\n    date_of_birth = null,\n    place_of_birth = null,\n    phone_no = null,\n    blood_group = null,\n    genotype = null,\n    address = null,\n    NIN_number = null,\n    next_of_king = null,\n    next_of_king_address = null,\n    phone_no2 = null,\n    plate_number = null,\n    classes_number = null,\n    side_number = null,\n    phone_no3 = null,\n    name_of_company = null,\n    qrcode = null,\n  } = req.query;\n  const { query_type = \"create\" } = req.query;\n  db.sequelize\n    .query(\n      `call create_user(:id,:vehicle_id,:query_type,:name,:middle_name,:surname,:gender,:status,:nationality,:state_of_origin,:lg,:date_of_birth,:place_of_birth,:phone_no,:blood_group,:genotype,:address,:NIN_number,:next_of_king,:next_of_king_address,:phone_no2,:plate_number,:classes_number,:side_number,:phone_no3,:name_of_company,:qrcode)`,\n      {\n        replacements: {\n          id,\n          vehicle_id,\n          query_type,\n          name,\n          middle_name,\n          surname,\n          gender,\n          status,\n          nationality,\n          state_of_origin,\n          lg,\n          date_of_birth,\n          place_of_birth,\n          phone_no,\n          blood_group,\n          genotype,\n          address,\n          NIN_number,\n          next_of_king,\n          next_of_king_address,\n          phone_no2,\n          plate_number,\n          classes_number,\n          side_number,\n          phone_no3,\n          name_of_company,\n          qrcode,\n        },\n      }\n    )\n    .then((results) => res.json({ success: true, results }))\n    .catch((err) => {\n      console.log(err);\n      res.status(500).json({ success: false });\n    });\n};\n\nmodule.exports.state_and_local_gvt = (req, res) => {\n  // const {  } = req.body;\n  const { type = null, state = null, local_gvt = null } = req.body;\n  const { query_type = \"insert\" } = req.query;\n  db.sequelize\n    .query(`call state_and_local_gvt(:query_type,:type,:state,:local_gvt)`, {\n      replacements: {\n        query_type,\n        type,\n        state,\n        local_gvt,\n      },\n    })\n    .then((results) => res.json({ success: true, results }))\n    .catch((err) => {\n      console.log(err);\n      res.status(500).json({ success: false });\n    });\n};"]}