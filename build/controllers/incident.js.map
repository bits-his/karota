{"version":3,"sources":["../../src/controllers/incident.js"],"names":["db","require","module","exports","create_incident","req","res","body","id","user_name","type_of_incident","description","query","query_type","sequelize","replacements","then","results","console","log","json","success","catch","err","status","getIncident"],"mappings":";;AAAA,IAAMA,KAAKC,QAAQ,WAAR,CAAX;AACAC,OAAOC,OAAP,CAAeC,eAAf,GAAiC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,kBAMzCD,IAAIE,IANqC;AAAA,+BAE3CC,EAF2C;AAAA,MAE3CA,EAF2C,gCAEtC,IAFsC;AAAA,sCAG3CC,SAH2C;AAAA,MAG3CA,SAH2C,uCAG/B,IAH+B;AAAA,wCAI3CC,gBAJ2C;AAAA,MAI3CA,gBAJ2C,yCAIxB,IAJwB;AAAA,wCAK3CC,WAL2C;AAAA,MAK3CA,WAL2C,yCAK7B,IAL6B;AAAA,8BAOXN,IAAIO,KAPO,CAOrCC,UAPqC;AAAA,MAOrCA,UAPqC,yCAOxB,QAPwB;;AAQ7Cb,KAAGc,SAAH,CACGF,KADH,6EAGI;AACEG,kBAAc;AACZP,YADY;AAEZK,4BAFY;AAGZJ,0BAHY;AAIZC,wCAJY;AAKZC;AALY;AADhB,GAHJ,EAaGK,IAbH,CAaQ,UAACC,OAAD,EAAa;AACjBC,YAAQC,GAAR,CAAYF,OAAZ;AACAX,QAAIc,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBJ,gBAAjB,EAAT;AACD,GAhBH,EAiBGK,KAjBH,CAiBS,UAACC,GAAD,EAAS;AACdL,YAAQC,GAAR,CAAYI,GAAZ;AACAjB,QAAIkB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAArB;AACD,GApBH;AAqBD,CA7BD;;AA+BAnB,OAAOC,OAAP,CAAesB,WAAf,GAA6B,UAACpB,GAAD,EAAMC,GAAN,EAAc;AAAA,mBAMrCD,IAAIO,KANiC;AAAA,iCAEvCJ,EAFuC;AAAA,MAEvCA,EAFuC,iCAElC,IAFkC;AAAA,wCAGvCC,SAHuC;AAAA,MAGvCA,SAHuC,wCAG3B,IAH2B;AAAA,yCAIvCC,gBAJuC;AAAA,MAIvCA,gBAJuC,yCAIpB,IAJoB;AAAA,yCAKvCC,WALuC;AAAA,MAKvCA,WALuC,yCAKzB,IALyB;AAAA,+BAOPN,IAAIO,KAPG,CAOjCC,UAPiC;AAAA,MAOjCA,UAPiC,0CAOpB,QAPoB;;AAQzCb,KAAGc,SAAH,CACGF,KADH,6EAGI;AACEG,kBAAc;AACZP,YADY;AAEZK,4BAFY;AAGZJ,0BAHY;AAIZC,wCAJY;AAKZC;AALY;AADhB,GAHJ,EAaGK,IAbH,CAaQ,UAACC,OAAD,EAAa;AACjBC,YAAQC,GAAR,CAAYF,OAAZ;AACAX,QAAIc,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBJ,gBAAjB,EAAT;AACD,GAhBH,EAiBGK,KAjBH,CAiBS,UAACC,GAAD,EAAS;AACdL,YAAQC,GAAR,CAAYI,GAAZ;AACAjB,QAAIkB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAArB;AACD,GApBH;AAqBD,CA7BD","file":"incident.js","sourcesContent":["const db = require(\"../models\");\nmodule.exports.create_incident = (req, res) => {\n  const {\n    id = null,\n    user_name = null,\n    type_of_incident = null,\n    description = null,\n  } = req.body;\n  const { query_type = \"create\" } = req.query;\n  db.sequelize\n    .query(\n      `call incident(:id,:query_type,:user_name,:type_of_incident,:description)`,\n      {\n        replacements: {\n          id,\n          query_type,\n          user_name,\n          type_of_incident,\n          description,\n        }\n      }\n    )\n    .then((results) => {\n      console.log(results)\n      res.json({ success: true, results })\n    })\n    .catch((err) => {\n      console.log(err);\n      res.status(500).json({ success: false });\n    });\n};\n\nmodule.exports.getIncident = (req, res) => {\n  const {\n    id = null,\n    user_name = null,\n    type_of_incident = null,\n    description = null,\n  } = req.query;\n  const { query_type = \"create\" } = req.query;\n  db.sequelize\n    .query(\n      `call incident(:id,:query_type,:user_name,:type_of_incident,:description)`,\n      {\n        replacements: {\n          id,\n          query_type,\n          user_name,\n          type_of_incident,\n          description,\n        }\n      }\n    )\n    .then((results) => {\n      console.log(results)\n      res.json({ success: true, results })\n    })\n    .catch((err) => {\n      console.log(err);\n      res.status(500).json({ success: false });\n    });\n};"]}