{"version":3,"file":"vehicles_registration.js","names":["db","require","module","exports","registerVehicle","_ref","_asyncToGenerator2","_regenerator","mark","_callee","req","res","_req$body","_req$body$query_type","query_type","_req$body$id","id","_req$body$owner_id","owner_id","_req$body$lg_reg_no","lg_reg_no","_req$body$engine_no","engine_no","_req$body$chasis_no","chasis_no","_req$body$plate_no","plate_no","_req$body$manufacture","manufacturer","_req$body$manufacturi","manufacturing_date","_req$body$purchased_d","purchased_date","_req$body$state_regis","state_registered","_req$body$registered_","registered_lg","resp","wrap","_callee$","_context","prev","next","body","sequelize","query","replacements","sent","status","json","success","data","t0","console","error","stop","_x","_x2","apply","arguments","getRegVehicles","_ref2","_callee2","_req$query","_req$query$query_type","_req$query$id","_req$query$owner_id","_req$query$lg_reg_no","_req$query$engine_no","_req$query$chasis_no","_req$query$plate_no","_req$query$manufactur","_req$query$manufactur2","_req$query$purchased_","_req$query$state_regi","_req$query$registered","_callee2$","_context2","_x3","_x4"],"sources":["../../src/controllers/vehicles_registration.js"],"sourcesContent":["// const bcrypt from 'bcryptjs';\nconst db = require('../models');\n\nmodule.exports.registerVehicle = async (req, res) => {\n  const {\n    query_type = 'insert',\n    id = null,\n    owner_id = null,\n    lg_reg_no = null,\n    engine_no = null,\n    chasis_no =null,\n    plate_no = null,\n    manufacturer = null,\n    manufacturing_date = null,\n    purchased_date = null,\n    state_registered = null,\n    registered_lg = null,\n  } = req.body;\n\n  try {\n    const resp = await db.sequelize.query(\n      `CALL vehicles(\n        :query_type,  \n        :id, \n       :owner_id, \n       :lg_reg_no,\n        :engine_no, \n        :chasis_no,\n       :plate_no, \n       :manufacturer,\n        :manufacturing_date,\n        :purchased_date, \n       :state_registered,\n        :registered_lg)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          owner_id,\n          lg_reg_no,\n          engine_no,\n          chasis_no,\n          plate_no,\n          manufacturer,\n          manufacturing_date,\n          purchased_date,\n          state_registered,\n          registered_lg\n        }\n      }\n    );\n\n    res.status(200).json({ success: true, data: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to register vehicle' });\n  }\n};\n\n//  @ Get all vendors\n//  @route GET /vendors \nmodule.exports.getRegVehicles = async (req, res) => {\n  const {\n    query_type = 'select',\n    id = null,\n    owner_id = null,\n    lg_reg_no = null,\n    engine_no = null,\n    chasis_no =null,\n    plate_no = null,\n    manufacturer = null,\n    manufacturing_date = null,\n    purchased_date = null,\n    state_registered = null,\n    registered_lg = null,\n  } = req.query;\n\n  try {\n    const resp = await db.sequelize.query(\n      `CALL vehicles(\n        :query_type,  \n        :id, \n       :owner_id, \n       :lg_reg_no,\n        :engine_no,\n        :chasis_no, \n       :plate_no, \n       :manufacturer,\n        :manufacturing_date,\n        :purchased_date, \n       :state_registered,\n        :registered_lg)`,\n      {\n        replacements: {\n          query_type,\n          id,\n          owner_id,\n          lg_reg_no,\n          engine_no,\n          chasis_no,\n          plate_no,\n          manufacturer,\n          manufacturing_date,\n          purchased_date,\n          state_registered,\n          registered_lg\n        }\n      }\n    );\n\n    res.status(200).json({ success: true, data: resp });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, error: 'Failed to fetch vehicle' });\n  }\n\n};\n\n//       }\n//       res.json({ user })\n//     })\n//     .catch(err => res.status(500).json({ err }));\n// };\n\n\n\n\n"],"mappings":"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","ignoreList":[]}